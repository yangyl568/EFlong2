import{_ as n,c as a,a as e,o as i}from"./app-BxErJW_0.js";const l={};function c(p,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="ai-codereview-gitlab-使用教程" tabindex="-1"><a class="header-anchor" href="#ai-codereview-gitlab-使用教程"><span>AI-Codereview-Gitlab 使用教程</span></a></h1><h2 id="查看步骤" tabindex="-1"><a class="header-anchor" href="#查看步骤"><span>查看步骤</span></a></h2><p>以下是在 Mac M1 上通过 Docker 远程部署 Git 项目的步骤：</p><h3 id="_1-首先登录远程服务器" tabindex="-1"><a class="header-anchor" href="#_1-首先登录远程服务器"><span>1. 首先登录远程服务器</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">ssh</span> username@47.120.34.18</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>(将 <code>username</code> 替换为你的实际用户名，系统会提示输入密码)</p><h3 id="_2-在服务器上安装-docker-如果尚未安装" tabindex="-1"><a class="header-anchor" href="#_2-在服务器上安装-docker-如果尚未安装"><span>2. 在服务器上安装 Docker（如果尚未安装）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 对于 CentOS/RHEL:</span></span>
<span class="line"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils</span>
<span class="line"><span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span>
<span class="line"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</span>
<span class="line"><span class="token function">sudo</span> systemctl start <span class="token function">docker</span></span>
<span class="line"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 对于 Ubuntu/Debian:</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> update</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker.io</span>
<span class="line"><span class="token function">sudo</span> systemctl start <span class="token function">docker</span></span>
<span class="line"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-克隆项目并创建-dockerfile" tabindex="-1"><a class="header-anchor" href="#_3-克隆项目并创建-dockerfile"><span>3. 克隆项目并创建 Dockerfile</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/sunmh207/AI-Codereview-Gitlab.git</span>
<span class="line"><span class="token builtin class-name">cd</span> AI-Codereview-Gitlab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个 Dockerfile（如果项目没有提供）：</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code><span class="line"><span class="token comment"># 使用适合项目的基础镜像，例如Python</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> python:3.9-slim</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 设置工作目录</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 复制项目文件</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . .</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 安装依赖（根据项目实际需求修改）</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 暴露端口（根据项目实际需求修改）</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 8000</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动命令（根据项目实际需求修改）</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;python&quot;</span>, <span class="token string">&quot;app.py&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-构建并运行-docker-容器" tabindex="-1"><a class="header-anchor" href="#_4-构建并运行-docker-容器"><span>4. 构建并运行 Docker 容器</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 构建镜像</span></span>
<span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ai-codereview <span class="token builtin class-name">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 运行容器（根据项目需求调整端口映射和参数）</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">--name</span> ai-review ai-codereview</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-验证容器是否运行" tabindex="-1"><a class="header-anchor" href="#_5-验证容器是否运行"><span>5. 验证容器是否运行</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token function">ps</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="替代方案-如果项目已有-docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#替代方案-如果项目已有-docker-compose-yml"><span>替代方案：如果项目已有 docker-compose.yml</span></a></h3><p>如果项目包含 docker-compose.yml 文件，只需运行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项：</span></a></h3><ol><li>确保服务器防火墙开放了所需端口（如 8000）</li><li>M1 Mac 可能需要确保服务器上的 Docker 镜像与 ARM 架构兼容</li><li>根据项目实际需求调整 Dockerfile 中的命令</li><li>如果项目需要数据库或其他服务，可能需要额外配置</li></ol><h3 id="如果需要在本地构建镜像再推送到服务器" tabindex="-1"><a class="header-anchor" href="#如果需要在本地构建镜像再推送到服务器"><span>如果需要在本地构建镜像再推送到服务器：</span></a></h3><ol><li>本地构建（确保使用 ARM 兼容镜像）：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> buildx build <span class="token parameter variable">--platform</span> linux/amd64 <span class="token parameter variable">-t</span> ai-codereview <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>推送到 Docker Hub：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> tag ai-codereview yourusername/ai-codereview</span>
<span class="line"><span class="token function">docker</span> push yourusername/ai-codereview</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在服务器上拉取并运行：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> pull yourusername/ai-codereview</span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 yourusername/ai-codereview</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码"><span>测试代码</span></a></h2>`,29)]))}const t=n(l,[["render",c]]),d=JSON.parse('{"path":"/ai/AI-Codereview-Gitlab.html","title":"AI-Codereview-Gitlab 使用教程","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1747633366000,"contributors":[{"name":"yangyl568","username":"yangyl568","email":"273735803@qq.com","commits":2,"url":"https://github.com/yangyl568"}],"changelog":[{"hash":"bbd2eb482a577453ae159df840ec02505d28df84","time":1747633366000,"email":"273735803@qq.com","author":"yangyl568","message":"feat: 上传测试代码"},{"hash":"99836843e17c6ff626673eacb6b27c8fb984809f","time":1747625319000,"email":"273735803@qq.com","author":"yangyl568","message":"feat: 添加 # AI-Codereview-Gitlab 使用教程"}]},"filePathRelative":"ai/AI-Codereview-Gitlab.md"}');export{t as comp,d as data};
