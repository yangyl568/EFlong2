import{_ as a,c as n,a as e,o as l}from"./app-BxErJW_0.js";const i="/EFlong2/assets/docker-pull--RyChLUn.png",t="/EFlong2/assets/gitlab-home-C0Ps5Tp4.png",p="/EFlong2/assets/profile-preferences-Bosna5pO.png",r={};function c(o,s){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="搭建-gitlab-环境" tabindex="-1"><a class="header-anchor" href="#搭建-gitlab-环境"><span>搭建 gitlab 环境</span></a></h1><h2 id="mac-m1-系统搭建" tabindex="-1"><a class="header-anchor" href="#mac-m1-系统搭建"><span>mac m1 系统搭建</span></a></h2><h3 id="_1-安装-docker" tabindex="-1"><a class="header-anchor" href="#_1-安装-docker"><span>1. 安装 docker</span></a></h3><p>直接去官网下载安装即可</p><h3 id="_2-安装-gitlab-镜像" tabindex="-1"><a class="header-anchor" href="#_2-安装-gitlab-镜像"><span>2. 安装 gitlab 镜像</span></a></h3><p>由于 Mac M1 芯片，找镜像的时候需要 ARM 64，然后一般推荐的镜像就是 gitlab-ce。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> search gitlib-ce</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 下载镜像</span></span>
<span class="line"><span class="token function">docker</span> pull yrzr/gitlab-ce-arm64v8:latest</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的代表下载成功了！</p><p><img src="`+i+`" alt="docker pull"></p><p>注意 📢：这里很有可能会遇到下载不下来的问题。一般都是因为网络问题导致的，所以需要配置下 docker 的镜像源地址。</p><p>这里我推荐这个网站上去找：<a href="https://www.coderjia.cn/archives/dba3f94c-a021-468a-8ac6-e840f85867ea" target="_blank" rel="noopener noreferrer">目前国内可用 Docker 镜像源汇总</a></p><h3 id="_3-启动-gitlab" tabindex="-1"><a class="header-anchor" href="#_3-启动-gitlab"><span>3. 启动 gitlab</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-itd</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--detach</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--name</span> gitlab-ce <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--memory</span> 4096M <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--publish</span> <span class="token number">9922</span>:22 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--publish</span> <span class="token number">9980</span>:80 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--volume</span> ~/gitlab/etc:/etc/gitlab:z <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--volume</span> ~/gitlab/log:/var/log/gitlab:z <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--volume</span> ~/gitlab/opt:/var/opt/gitlab:z <span class="token punctuation">\\</span></span>
<span class="line">  yrzr/gitlab-ce-arm64v8:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 📢：如果报错 invalid reference format，请检查 路径是否正确。</p><h4 id="常见问题排查" tabindex="-1"><a class="header-anchor" href="#常见问题排查"><span>常见问题排查</span></a></h4><p>1.如果仍然报错 invalid reference format</p><ul><li><p>检查 --volume 路径是否正确，确保没有多余的空格或特殊字符。</p></li><li><p>确保 yrzr/gitlab-ce-arm64v8:latest 镜像名称拼写正确（可以先用 docker pull yrzr gitlab-ce-arm64v8:latest 测试是否能拉取）。</p><p>2.如果报错 No such file or directory</p></li><li><p>确保本地目录已创建（mkdir -p ~/gitlab/{etc,log,opt}）。</p></li><li><p>如果路径包含空格或特殊字符，建议用引号包裹：</p></li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token parameter variable">--volume</span> <span class="token string">&quot;<span class="token environment constant">$HOME</span>/gitlab/etc:/etc/gitlab&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.如果报错 Permission denied</p><ul><li>尝试去掉 😒 选项（Mac 通常不需要 SELinux 配置）：</li></ul><p><code>--volume ~/gitlab/etc:/etc/gitlab</code></p><ul><li>或者手动赋予目录权限：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> ~/gitlab <span class="token comment"># 仅用于测试环境，生产环境需严格限制权限</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-配置-gitlab-访问地址" tabindex="-1"><a class="header-anchor" href="#_4-配置-gitlab-访问地址"><span>4.配置 gitlab 访问地址</span></a></h3><p>进入容器修改配置：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab-ce /bin/bash</span>
<span class="line"><span class="token function">vi</span> /etc/gitlab/gitlab.rb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">external_url <span class="token string">&#39;http://&lt;你的Mac本地IP&gt;:9980&#39;</span>  <span class="token comment"># 如 http://192.168.1.100:9980</span></span>
<span class="line">gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_ssh_host&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&lt;你的Mac本地IP&gt;&#39;</span>  <span class="token comment"># 如 192.168.1.100</span></span>
<span class="line">gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_shell_ssh_port&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9922</span></span>
<span class="line">nginx<span class="token punctuation">[</span><span class="token string">&#39;listen_addresses&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 允许所有 IP 访问</span></span>
<span class="line">nginx<span class="token punctuation">[</span><span class="token string">&#39;listen_port&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span>                <span class="token comment"># 确保端口正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用配置并重启：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">gitlab-ctl reconfigure</span>
<span class="line">gitlab-ctl restart</span>
<span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="问题-这里配置并重启之后连接访问不了了" tabindex="-1"><a class="header-anchor" href="#问题-这里配置并重启之后连接访问不了了"><span>问题：这里配置并重启之后连接访问不了了</span></a></h4><p>效果是: 无法访问此网站</p><p>真的很神奇，原本没配置的时候还是可以访问的。</p><p><strong>解决方案</strong> 验证 GitLab 服务监听地址 进入容器检查 Nginx 是否监听所有地址（0.0.0.0:80）：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab-ce <span class="token function">netstat</span> <span class="token parameter variable">-tuln</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>预期输出：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">tcp   <span class="token number">0</span>   <span class="token number">0</span> <span class="token number">0.0</span>.0.0:80    <span class="token number">0.0</span>.0.0:*     LISTEN</span>
<span class="line">若输出为 <span class="token number">127.0</span>.0.1:80：</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明服务仅绑定到容器本地地址，需修改配置：</p><p>编辑 /etc/gitlab/gitlab.rb：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">nginx<span class="token punctuation">[</span><span class="token string">&#39;listen_addresses&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 允许所有 IP 访问</span></span>
<span class="line">nginx<span class="token punctuation">[</span><span class="token string">&#39;listen_port&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span>                <span class="token comment"># 确保端口正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>重新配置并重启：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">gitlab-ctl reconfigure</span>
<span class="line">gitlab-ctl restart nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-检查是否可以访问" tabindex="-1"><a class="header-anchor" href="#_5-检查是否可以访问"><span>5.检查是否可以访问</span></a></h3><ul><li>访问 http://localhost:9980</li></ul><h3 id="_6-配置-gitlab-root-密码" tabindex="-1"><a class="header-anchor" href="#_6-配置-gitlab-root-密码"><span>6.配置 gitlab root 密码</span></a></h3><p>网页端修改（推荐）</p><p><strong>正确修改 GitLab 用户密码的方法</strong> 如果你想修改 GitLab 用户的密码（例如 <code>root</code> 或其他用户），应该这样操作：</p><hr><h4 id="方法-1-通过-gitlab-rails-console-修改密码" tabindex="-1"><a class="header-anchor" href="#方法-1-通过-gitlab-rails-console-修改密码"><span><strong>方法 1：通过 GitLab Rails Console 修改密码</strong></span></a></h4><ol><li><p><strong>进入 GitLab Rails Console</strong>（在容器内执行）：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab-ce gitlab-rails console</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（如果是非容器环境，直接运行 <code>gitlab-rails console</code>）</p></li><li><p><strong>查找用户并修改密码</strong>（例如修改 <code>root</code> 用户的密码）：</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code><span class="line">user <span class="token operator">=</span> User<span class="token punctuation">.</span>find_by<span class="token punctuation">(</span><span class="token symbol">username</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&#39;root&#39;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 或 email: &#39;admin@example.com&#39;</span></span>
<span class="line">user<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;admin123!&#39;</span></span>           <span class="token comment"># 新密码</span></span>
<span class="line">user<span class="token punctuation">.</span>password_confirmation <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;admin123!&#39;</span></span></span>
<span class="line">user<span class="token punctuation">.</span>save<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>如果成功</strong>，会返回 <code>true</code>。</li><li><strong>如果失败</strong>，检查错误信息（如密码太短）。</li></ul></li><li><p><strong>退出 Console</strong>：</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code><span class="line">exit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><h4 id="方法-2-直接使用-gitlab-rails-命令修改" tabindex="-1"><a class="header-anchor" href="#方法-2-直接使用-gitlab-rails-命令修改"><span><strong>方法 2：直接使用 <code>gitlab-rails</code> 命令修改</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab-ce gitlab-rails runner <span class="token string">&quot;user = User.find_by(username: &#39;root&#39;); user.password = &#39;admin123!&#39;; user.password_confirmation = &#39;admin123!&#39;; user.save!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（适用于脚本自动化修改）</p><hr><h4 id="方法-3-通过-web-界面修改" tabindex="-1"><a class="header-anchor" href="#方法-3-通过-web-界面修改"><span><strong>方法 3：通过 Web 界面修改</strong></span></a></h4><ol><li>访问 <code>http://localhost:9980</code>（或你的 GitLab 地址）。</li><li>使用 <code>root</code> 账户登录（初始密码在容器日志里找，或运行 <code>docker exec -it gitlab-ce cat /etc/gitlab/initial_root_password</code>）。</li><li>进入 <strong>用户设置 → 修改密码</strong>。</li></ol><hr><h4 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span><strong>常见问题</strong></span></a></h4><h4 id="_1-nameerror-undefined-local-variable-user" tabindex="-1"><a class="header-anchor" href="#_1-nameerror-undefined-local-variable-user"><span><strong>1. <code>NameError: undefined local variable &#39;user&#39;</code></strong></span></a></h4><ul><li><strong>原因</strong>：你直接运行 <code>user.password=&quot;...&quot;</code>，但 <code>user</code> 未定义。</li><li><strong>解决</strong>：必须先 <code>User.find_by(...)</code> 获取用户对象。</li></ul><h4 id="_2-activerecord-recordinvalid-保存失败" tabindex="-1"><a class="header-anchor" href="#_2-activerecord-recordinvalid-保存失败"><span><strong>2. <code>ActiveRecord::RecordInvalid</code>（保存失败）</strong></span></a></h4><ul><li><p><strong>可能原因</strong>：</p><ul><li>密码太短（GitLab 默认要求至少 8 位）。</li><li>用户不存在（检查 <code>username</code> 或 <code>email</code> 是否正确）。</li></ul></li><li><p><strong>解决</strong>：</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code><span class="line">user <span class="token operator">=</span> User<span class="token punctuation">.</span>find_by<span class="token punctuation">(</span><span class="token symbol">username</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&#39;root&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a_longer_password_123!&#39;</span></span>  <span class="token comment"># 至少 8 位</span></span>
<span class="line">user<span class="token punctuation">.</span>password_confirmation <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a_longer_password_123!&#39;</span></span></span>
<span class="line">user<span class="token punctuation">.</span>save<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-忘记-root-密码" tabindex="-1"><a class="header-anchor" href="#_3-忘记-root-密码"><span><strong>3. 忘记 <code>root</code> 密码</strong></span></a></h4><ul><li>如果无法登录，可以用 <strong>方法 1</strong> 或 <strong>方法 2</strong> 重置密码。</li></ul><hr><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h4><ul><li><strong>错误原因</strong>：直接使用未定义的 <code>user</code> 变量。</li><li><strong>正确做法</strong>： <ul><li>先 <code>User.find_by</code> 查找用户。</li><li>再修改密码并 <code>save!</code>。</li></ul></li><li><strong>推荐方法</strong>：使用 <code>gitlab-rails console</code> 或 <code>gitlab-rails runner</code>。</li></ul><p>现在你可以成功修改 GitLab 用户的密码了！</p><p><img src="`+t+'" alt="gitlab-home"></p><p>进入 Preferences → Language，选择 简体中文。 保存并刷新页面即可</p><p><img src="'+p+'" alt="profile-preferences"></p>',72)]))}const u=a(r,[["render",c]]),b=JSON.parse('{"path":"/jilei/gitlab.html","title":"搭建 gitlab 环境","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1747983112000,"contributors":[{"name":"yangyl568","username":"yangyl568","email":"273735803@qq.com","commits":2,"url":"https://github.com/yangyl568"}],"changelog":[{"hash":"46e49957eb510023468fded86705b5fdfa921ed8","time":1747983112000,"email":"273735803@qq.com","author":"yangyl568","message":"feat: 补充 gitlab"},{"hash":"2acbf270b7b08c522a967a76710ffc67a38d0f01","time":1747712044000,"email":"273735803@qq.com","author":"yangyl568","message":"feat: 添加 gitlab"}]},"filePathRelative":"jilei/gitlab.md"}');export{u as comp,b as data};
